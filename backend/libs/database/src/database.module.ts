import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { DatabaseService } from './database.service';
import { SeederService } from './seeds/seeder.service';
import {
  User,
  UserSession,
  OtpVerification,
  EmailOtp,
  Role,
  State,
  LocalGovernmentArea,
  Neighborhood,
  Post,
  PostComment,
  PostMedia,
  PostReaction,
  PostCategory,
  UserNeighborhood,
  Media,
  CommentMedia,
  Listing,
  ListingCategory,
  ListingMedia,
  ListingSave,
  EventCategory,
  Event,
  EventMedia,
  EventAttendee,
  UserBookmark,
  UserDashboardStats,
  NinVerification,
  IdentityDocument,
  VerificationAudit,
  UserBadge,
  CommunityEndorsement,
  Achievement,
  UserAchievement,
  Badge,
  GamificationBadge,
  UserActivityLog,
  UserPoints,
  LeaderboardSnapshot,
  BusinessProfile,
  BusinessCategory,
  BusinessLicense,
  BusinessService,
  BusinessReview,
  BusinessInquiry,
  BusinessActivityLog,
} from './entities';

@Module({
  imports: [
    ConfigModule,
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: (configService: ConfigService) => ({
        type: 'postgres',
        host: configService.get('DATABASE_HOST', 'localhost'),
        port: configService.get('DATABASE_PORT', 5432),
        username: configService.get('DATABASE_USERNAME', 'MeCabal_user'),
        password: configService.get('DATABASE_PASSWORD', 'MeCabal_password'),
        database: configService.get('DATABASE_NAME', 'MeCabal_dev'),
        entities: [
          User,
          UserSession,
          OtpVerification,
          EmailOtp,
          Role,
          State,
          LocalGovernmentArea,
          Neighborhood,
          Post,
          PostComment,
          PostMedia,
          PostReaction,
          PostCategory,
          UserNeighborhood,
          Media,
          CommentMedia,
          Listing,
          ListingCategory,
          ListingMedia,
          ListingSave,
          EventCategory,
          Event,
          EventMedia,
          EventAttendee,
          UserBookmark,
          UserDashboardStats,
          NinVerification,
          IdentityDocument,
          VerificationAudit,
          UserBadge,
          CommunityEndorsement,
          Achievement,
          UserAchievement,
          Badge,
          GamificationBadge,
          UserActivityLog,
          UserPoints,
          LeaderboardSnapshot,
          BusinessProfile,
          BusinessCategory,
          BusinessLicense,
          BusinessService,
          BusinessReview,
          BusinessInquiry,
          BusinessActivityLog,
        ],
        synchronize: configService.get('NODE_ENV') === 'development',
        logging: configService.get('NODE_ENV') === 'development',
        ssl:
          configService.get('NODE_ENV') === 'production'
            ? {
                rejectUnauthorized: false,
              }
            : false,
      }),
      inject: [ConfigService],
    }),
    TypeOrmModule.forFeature([
      User,
      UserSession,
      OtpVerification,
      EmailOtp,
      Role,
      State,
      LocalGovernmentArea,
      Neighborhood,
      Post,
      PostComment,
      PostMedia,
      PostReaction,
      PostCategory,
      UserNeighborhood,
      Media,
      CommentMedia,
      Listing,
      ListingCategory,
      ListingMedia,
      ListingSave,
      EventCategory,
      Event,
      EventMedia,
      EventAttendee,
      UserBookmark,
      UserDashboardStats,
      NinVerification,
      IdentityDocument,
      VerificationAudit,
      UserBadge,
      CommunityEndorsement,
      Achievement,
      UserAchievement,
      Badge,
      GamificationBadge,
      UserActivityLog,
      UserPoints,
      LeaderboardSnapshot,
      BusinessProfile,
      BusinessCategory,
      BusinessLicense,
      BusinessService,
      BusinessReview,
      BusinessInquiry,
      BusinessActivityLog,
    ]),
  ],
  providers: [DatabaseService, SeederService],
  exports: [DatabaseService, TypeOrmModule, SeederService],
})
export class DatabaseModule {}
