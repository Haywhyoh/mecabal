name: Deploy MeCabal Backend

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  packages: write
  id-token: write

env:
  NODE_VERSION: '22'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/mecabal-backend

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci

    # - name: Run linting
    #   run: npm run lint

    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
      continue-on-error: true

    - name: Run e2e tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
      continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd ${{ secrets.STAGING_PROJECT_PATH }}

          # Create backup tag for rollback
          docker-compose -f docker-compose.production.yml exec -T postgres pg_dump -U $DATABASE_USERNAME $DATABASE_NAME > backup_staging_$(date +%Y%m%d_%H%M%S).sql || echo "Backup skipped (first deployment)"

          # Pull latest code
          git pull origin develop

          # Update environment variables from secrets
          echo "${{ secrets.STAGING_ENV }}" | base64 -d > .env

          # Pull latest Docker images
          docker-compose -f docker-compose.production.yml pull

          # Stop existing containers gracefully
          docker-compose -f docker-compose.production.yml down --timeout 30

          # Run database migrations
          docker-compose -f docker-compose.production.yml run --rm api-gateway npm run migration:run || echo "Migration skipped or failed"

          # Start new containers
          docker-compose -f docker-compose.production.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 45

          # Run comprehensive health checks for all 10 services
          echo "Running health checks..."
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
          curl -f http://localhost:3003/health || exit 1
          curl -f http://localhost:3004/health || exit 1
          curl -f http://localhost:3005/health || exit 1
          curl -f http://localhost:3006/health || exit 1
          curl -f http://localhost:3007/health || exit 1
          curl -f http://localhost:3008/health || exit 1
          curl -f http://localhost:3009/health || exit 1

          # Clean up old images
          docker image prune -f

          echo "Staging deployment completed successfully!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      id: deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd ${{ secrets.PRODUCTION_PROJECT_PATH }}

          # Store current commit for potential rollback
          PREVIOUS_COMMIT=$(git rev-parse HEAD)
          echo "Previous commit: $PREVIOUS_COMMIT"

          # Create timestamped backup of current deployment
          BACKUP_FILE="backup_production_$(date +%Y%m%d_%H%M%S).sql"
          echo "Creating database backup: $BACKUP_FILE"

          # Load environment variables for backup
          if [ -f .env ]; then
            export $(cat .env | grep -E "^DATABASE_" | xargs)
          fi

          # Create backup (skip if database doesn't exist yet)
          docker-compose -f docker-compose.production.yml exec -T postgres pg_dump -U ${DATABASE_USERNAME:-mecabal_user} ${DATABASE_NAME:-mecabal_production} > $BACKUP_FILE 2>/dev/null || echo "Skipping backup (first deployment or database not ready)"

          # Keep only last 7 backups
          ls -t backup_production_*.sql | tail -n +8 | xargs -r rm

          # Pull latest code
          git pull origin main
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "New commit: $CURRENT_COMMIT"

          # Update environment variables from secrets
          echo "${{ secrets.PRODUCTION_ENV }}" | base64 -d > .env

          # Verify .env was created
          if [ ! -f .env ] || [ ! -s .env ]; then
            echo "ERROR: .env file was not created or is empty!"
            echo "Please check PRODUCTION_ENV secret is set correctly"
            exit 1
          fi

          # Load environment variables
          export $(cat .env | grep -v '^#' | xargs)
          echo "âœ“ Environment variables loaded"

          # Pull latest Docker images
          docker-compose -f docker-compose.production.yml pull

          # Stop existing containers gracefully
          echo "Stopping services gracefully..."
          docker-compose -f docker-compose.production.yml down --timeout 30

          # Ensure infrastructure is ready before migrations
          echo "Starting infrastructure services..."
          docker-compose -f docker-compose.production.yml up -d postgres redis rabbitmq minio

          # Wait for infrastructure to be healthy
          echo "Waiting for database to be ready..."
          for i in {1..30}; do
            if docker-compose -f docker-compose.production.yml exec -T postgres pg_isready -U ${DATABASE_USERNAME:-mecabal_user} > /dev/null 2>&1; then
              echo "Database is ready!"
              break
            fi
            echo "Waiting for database... ($i/30)"
            sleep 2
          done

          # Run database migrations
          echo "Running database migrations..."
          docker-compose -f docker-compose.production.yml run --rm api-gateway npm run migration:run || {
            echo "Migration failed! Rolling back..."
            git reset --hard $PREVIOUS_COMMIT
            docker-compose -f docker-compose.production.yml up -d
            exit 1
          }

          # Start new containers
          echo "Starting new containers..."
          docker-compose -f docker-compose.production.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 60

          # Run comprehensive health checks for all 10 services
          echo "Running health checks..."
          HEALTH_CHECK_FAILED=0

          for PORT in 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009; do
            if ! curl -f http://localhost:$PORT/health; then
              echo "Health check failed for service on port $PORT"
              HEALTH_CHECK_FAILED=1
            else
              echo "Service on port $PORT is healthy"
            fi
          done

          if [ $HEALTH_CHECK_FAILED -eq 1 ]; then
            echo "Health checks failed! Rolling back deployment..."
            docker-compose -f docker-compose.production.yml down --timeout 30
            git reset --hard $PREVIOUS_COMMIT
            docker-compose -f docker-compose.production.yml up -d
            echo "Rollback completed. Restoring database from $BACKUP_FILE"
            docker-compose -f docker-compose.production.yml exec -T postgres psql -U $DATABASE_USERNAME -d $DATABASE_NAME < $BACKUP_FILE
            exit 1
          fi

          # Clean up old images to save space
          docker image prune -f

          echo "Production deployment completed successfully!"
          echo "Deployed commit: $CURRENT_COMMIT"
          echo "Backup available at: $BACKUP_FILE"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          MeCabal Backend Deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
