name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: homie_test
          POSTGRES_USER: homie_user
          POSTGRES_PASSWORD: homie_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test:cov
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USERNAME: homie_user
        DATABASE_PASSWORD: homie_password
        DATABASE_NAME: homie_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend
        directory: ./backend

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build applications
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          homie/auth-service
          homie/user-service
          homie/social-service
          homie/messaging-service
          homie/marketplace-service
          homie/events-service
          homie/notification-service
          homie/api-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker images
      run: |
        services=("auth-service" "user-service" "social-service" "messaging-service" "marketplace-service" "events-service" "notification-service" "api-gateway")
        
        for service in "${services[@]}"; do
          echo "Building $service..."
          docker build -t homie/$service:${{ github.sha }} -f apps/$service/Dockerfile .
          
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            docker push homie/$service:${{ github.sha }}
            
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              docker tag homie/$service:${{ github.sha }} homie/$service:latest
              docker push homie/$service:latest
            fi
          fi
        done

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying backend services to staging environment"
        # Add your deployment commands here
        # Example: kubectl, helm, or deployment scripts

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying backend services to production environment"
        # Add your deployment commands here
        # Example: kubectl, helm, or deployment scripts